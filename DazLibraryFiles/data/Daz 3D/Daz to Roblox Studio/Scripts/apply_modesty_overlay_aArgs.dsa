// DAZ Studio version 4.20.0.1.88 filetype DAZ Script
/**********************************************************************
 
	This script is provided as part of the Daz Script Documentation. The
	contents of this script, and\or any portion thereof, may only be used
	in accordance with the following license:
 
	Creative Commons Attribution 3.0 Unported (CC BY 3.0)
	- http://creativecommons.org/licenses/by/3.0
 
	To contact Daz 3D or for more information about Daz Script visit the
	Daz 3D website:
 
	- http://www.daz3d.com
 
**********************************************************************/
// version 3

// Define an anonymous function;
// serves as our main loop
// limits the scop of variables
(function( aArgs ){
    var g_sScriptName = getScriptFileName();
    var g_sModestyOverlayLayerName = "Roblox Modesty Overlay";
    var g_sCombinedHeadAndBodyUvSetName = "Combined Head And Body";

    /********************************************************************************************************/
    // Global Variables, Arrays contianing file paths to overlay images
    // index into the array is the overlay index: 0=Body, 1=Legs, 2=Head
    var g_aDiffuseOverlayImageFilePaths = [
        "",
        "",
        "",
    ];
    var g_aNormalOverlayImageFilePaths = [
        "",
        "",
        "",
    ];
    var g_aRoughnessOverlayImageFilePaths = [
        "",
        "",
        "",
    ];
    var g_aMetallicOverlayImageFilePaths = [
        "",
        "",
        "",
    ];
    
    /********************************************************************************************************/
    // bool: process the arguments passed to the script, popuplate the global variable arrays with the file paths
    function processArguments() {
    //    App.log("apply_modesty_overlay_aArgs.dsa: Sanity Checking...");
        if (!aArgs || Array.isArray(aArgs) == false) {
            App.error(g_sScriptName + ", processArguments(): CRITCIAL ERROR: Arguments are not an array.");
            return false;
        }
        // Sanity Checks
        if (aArgs.length != 4) {
            App.error(g_sScriptName + ", processArguments(): CRITCIAL ERROR: Invalid Number of Arguments, expected 4, got " + aArgs.length );
            return false;
        }
        for ( var i = 0, nArgs = aArgs.length; i < nArgs; i += 1 ){
            var aSubArray = aArgs[i];
            if ( !Array.isArray(aSubArray) ) {
                App.error(g_sScriptName + ", processArguments(): CRITCIAL ERROR: Argument " + i + " is not an array.");
                return false;
            }
            if ( aSubArray.length != 3 ) {
                App.error(g_sScriptName + ", processArguments(): CRITCIAL ERROR: Argument " + i + " does not have enough elements, expected 3, got " + aSubArray.length );
                return false;
            }
            for (var j = 0; j < aSubArray.length; j++) {
                if (typeof aSubArray[j] !== "string") {
                    App.error(g_sScriptName + ", processArguments(): CRITCIAL ERROR: Argument " + i + " element " + j + " is not a string.");
                    return false;
                }
            }
        }

        // Iterate over the arguments passed to the script
        for( var i = 0, nArgs = aArgs.length; i < nArgs; i += 1 ){
            var aSubArray = aArgs[i];
            for (var j = 0; j < aSubArray.length; j++) {
                switch (i) {
                    case 0:
                        g_aDiffuseOverlayImageFilePaths[j] = aSubArray[j];
                        break;
                    case 1:
                        g_aNormalOverlayImageFilePaths[j] = aSubArray[j];
                        break;
                    case 2:
                        g_aRoughnessOverlayImageFilePaths[j] = aSubArray[j];
                        break;
                    case 3:
                        g_aMetallicOverlayImageFilePaths[j] = aSubArray[j];
                        break;
                    default:
                        App.error(g_sScriptName + ", processArguments(): CRITCIAL ERROR: Invalid Argument Index: " + i + "; results may be unpredictable.");
                        break;
                }
            }
        }

        return true;
    };

    /********************************************************************************************************/
    // void: check UV Set
    function isUvSetValid(oMaterial) {
        var oUvSetProperty = oMaterial.findProperty("UV Set");
        if (oUvSetProperty) {
            var nCombinedUvSet = oUvSetProperty.findItemString(g_sCombinedHeadAndBodyUvSetName);
            var nCurrentUvSet = oUvSetProperty.getValue();
            if (nCurrentUvSet == nCombinedUvSet) {
                return false;
            }
        }
        return true;
    }

    /********************************************************************************************************/
    // void: remove the modesty overlay layer from color property
    function removeRobloxModestyLayer(oMaterial, oColorProperty) {
        // Get the current texture map
        var oCurrentTextureMap = oColorProperty.getMapValue();
        if (!oCurrentTextureMap) {
            // App.verbose(g_sScriptName + ", removeRobloxModestyLayer(): INFO: No current texture map found.");
            return;
        }

        if (oCurrentTextureMap.inherits("DzLayeredTexture") == false) {
            // App.verbose(g_sScriptName + ", removeRobloxModestyLayer(): INFO: Current texture map is not a layered texture.");
            return;
        }

        var nOverlayLayerIndex = oCurrentTextureMap.findLayerByLabel( g_sModestyOverlayLayerName );
        if (nOverlayLayerIndex < 0)
        {
            // App.verbose(g_sScriptName + ", removeRobloxModestyLayer(): INFO: Roblox Modesty Layer not found.");
            return;
        }
        oCurrentTextureMap.removeLayer(nOverlayLayerIndex);

    }

    /********************************************************************************************************/
    // void: Replace color property with layered texture containing (original texture map + overlay image)
    function replaceColorPropertyWithLayeredTexture(oMaterial, oColorProperty, sOverlayImageFilePath) {
        if (!sOverlayImageFilePath || sOverlayImageFilePath == "") {
//            App.verbose("INFO: apply_modesty_overlay_aArgs.dsa: No overlay image path found.");
            removeRobloxModestyLayer(oMaterial, oColorProperty);
            return;
        }

        var oOverlayImageFileInfo = new DzFileInfo(sOverlayImageFilePath);
        if ( oOverlayImageFileInfo.exists() == false ) {
            App.error(g_sScriptName + ", replaceColorPropertyWithLayeredTexture(): ERROR: Overlay image does not exist: " + sOverlayImageFilePath);
            oOverlayImageFileInfo.deleteLater();
            return;
        }
        oOverlayImageFileInfo.deleteLater();

        // Get the current texture map
        var oCurrentTextureMap = oColorProperty.getMapValue();
        if (!oCurrentTextureMap) {
            App.verbose(g_sScriptName + ", replaceColorPropertyWithLayeredTexture(): INFO: No current texture map found.");
            return;
        }

        var sMaterialName = oMaterial.name;
        var sLayeredTextureName = "Layered " + oColorProperty.name + " for " + sMaterialName;

        // Create a new layered texture
        var oImageMgr = App.getImageMgr();
        var oLayeredTexture = oImageMgr.createLayeredTexture(sLayeredTextureName);
        oLayeredTexture.size = new Size( 4096, 4096 );
        
        if (oCurrentTextureMap.inherits("DzLayeredTexture")) {
            // Deep copy existing Layered Texture to new Layered Texture
            oLayeredTexture.copyFrom(oCurrentTextureMap);
        }
        else
        {
            // Add the original texture map as the base layer
            var oBaseLayer = oLayeredTexture.createLayer("Base Layer");
            oBaseLayer.imageFile = oCurrentTextureMap.getFilename();			
        }

        // Check for existing modesty overlay layer
        var oOverlayLayer = null;
        var nOverlayLayerIndex = oLayeredTexture.findLayerByLabel( g_sModestyOverlayLayerName );
        if (nOverlayLayerIndex < 0)
        {
            // Add the overlay image as a new layer
            oOverlayLayer = oLayeredTexture.createLayer( g_sModestyOverlayLayerName );
        } else {
            oOverlayLayer = oLayeredTexture.getLayer(nOverlayLayerIndex);
        }
        oOverlayLayer.imageFile = sOverlayImageFilePath;

        // Assign the new layered texture to the material's diffuse color property
        oColorProperty.setMap(oLayeredTexture);

        // NECESSARY FOR SCRIPT TO WORK ATOMICLY
        // getPreviewPixmap is called to force Texture Baking to file
        oLayeredTexture.getPreviewPixmap(1,1);
        
    }

    /********************************************************************************************************/
    // void: replace various color property maps with layered textures, nOverlayIndex: 0=Body, 1=Legs, 2=Head
    function replaceMaterialWithLayeredTextures(oMaterial, nOverlayIndex) {
        if (!oMaterial) {
            App.error(g_sScriptName + ", replaceMaterialWithLayeredTextures(): ERROR: Material is not valid.");
            return;
        }

        // Access the "Diffuse Color" property of the material
        var oDiffuseColorProperty = oMaterial.findProperty("Diffuse Color");
        if (!oDiffuseColorProperty) {
            App.verbose(g_sScriptName + ", replaceMaterialWithLayeredTextures(): INFO: Material does not have a 'Diffuse Color' property.");
        } else {
            replaceColorPropertyWithLayeredTexture(oMaterial, oDiffuseColorProperty, g_aDiffuseOverlayImageFilePaths[nOverlayIndex]);
        }

        var oDiffuseColorProperty = oMaterial.findProperty("Translucency Color");
        if (!oDiffuseColorProperty) {
            App.verbose(g_sScriptName + ", replaceMaterialWithLayeredTextures(): INFO: Material does not have a 'Translucency Color' property.");
        } else {
            replaceColorPropertyWithLayeredTexture(oMaterial, oDiffuseColorProperty, g_aDiffuseOverlayImageFilePaths[nOverlayIndex]);
        }

        var oNormalMapProperty = oMaterial.findProperty("Normal Map");
        if (!oNormalMapProperty) {
            App.verbose(g_sScriptName + ", replaceMaterialWithLayeredTextures(): INFO: Material does not have a 'Normal Map' property.");
        } else {
            replaceColorPropertyWithLayeredTexture(oMaterial, oNormalMapProperty, g_aNormalOverlayImageFilePaths[nOverlayIndex]);
        }

        var oNormalMapProperty = oMaterial.findProperty("Detail Normal Map");
        if (!oNormalMapProperty) {
            App.verbose(g_sScriptName + ", replaceMaterialWithLayeredTextures(): INFO: Material does not have a 'Detail Normal Map' property.");
        } else {
            replaceColorPropertyWithLayeredTexture(oMaterial, oNormalMapProperty, g_aNormalOverlayImageFilePaths[nOverlayIndex]);
        }

        var oRoughnessMapProperty = oMaterial.findProperty("Specular Lobe 1 Roughness");
        if (!oRoughnessMapProperty) {
            oRoughnessMapProperty = oMaterial.findProperty("Glossy Roughness");
        }
        if (oRoughnessMapProperty) {
            replaceColorPropertyWithLayeredTexture(oMaterial, oRoughnessMapProperty, g_aRoughnessOverlayImageFilePaths[nOverlayIndex]);
        }

        var oSpecularMapProperty = oMaterial.findProperty("Dual Lobe Specular Weight");
        if (!oSpecularMapProperty || !oSpecularMapProperty.getMapValue()) {
            oSpecularMapProperty = oMaterial.findProperty("Dual Lobe Specular Reflectivity");
            if (!oSpecularMapProperty || !oSpecularMapProperty.getMapValue()) {
                oSpecularMapProperty = oMaterial.findProperty("Glossy Reflectivity");
            }
        }
        if (oSpecularMapProperty && oSpecularMapProperty.getMapValue()) {
            App.verbose(g_sScriptName + ", replaceMaterialWithLayeredTextures(): INFO: applying specular overlay...");
            replaceColorPropertyWithLayeredTexture(oMaterial, oSpecularMapProperty, g_aRoughnessOverlayImageFilePaths[nOverlayIndex]);
        }

        var oMetallicMapProperty = oMaterial.findProperty("Metallic Weight");
        if (oMetallicMapProperty && oMetallicMapProperty.getMapValue()) {
            App.verbose(g_sScriptName + ", replaceMaterialWithLayeredTextures(): INFO: applying metallic overlay...");
            replaceColorPropertyWithLayeredTexture(oMaterial, oMetallicMapProperty, g_aMetallicOverlayImageFilePaths[nOverlayIndex]);
        }

        App.verbose(g_sScriptName + ", replaceMaterialWithLayeredTextures(): INFO: Replaced texture map with layered texture for material: " + oMaterial.name);
    }

    /********************************************************************************************************/
    // void: Main function
    function main() {
        if (!processArguments()) {
            App.log(g_sScriptName + ": Failed to process arguments, aborting script.");
            return;
        }

        var oSelectedNode = Scene.getPrimarySelection();
        if (oSelectedNode) {
    //        App.log("apply_modesty_overlay_aArgs.dsa: DEBUG: Selected Node: " + oSelectedNode.name);
            var oSelectedNodeObject = oSelectedNode.getObject();
            
            if (oSelectedNodeObject) {
                var oSelectedNodeShape = oSelectedNodeObject.getCurrentShape();
                var nMaterialCount = oSelectedNodeShape.getNumMaterials();
    //            App.log("apply_modesty_overlay_aArgs.dsa: DEBUG: Number of Materials: " + nMaterialCount);

                if (nMaterialCount < 1) {
                    App.error(g_sScriptName + ": ERROR: No materials on selected object, aborting script.");
                    return;
                }

                if (!isUvSetValid(oSelectedNodeShape.getMaterial(0))) {
                    App.error(g_sScriptName + ": ERROR: Incompatible UV Set detected, aborting script.");
                    var sButton = text( "&Abort" );
                    var sTitle = text( "Incompatible UV Set" );
                    var sMessage = text( "Unable to apply modesty layer because the character is using an incompatible UV Set.\n\nPlease reset the character skin materials and try again.\n\n" );
                    MessageBox.warning( sMessage, sTitle, sButton, "" );
                    return;
                }

                for (var i = 0; i < nMaterialCount; i++) {
                    var oMaterial = oSelectedNodeShape.getMaterial(i);            
                    // App.log("DEBUG: apply_modesty_overlay_aArgs.dsa: DEBUG: Material " + (i + 1) + ": " + material.name);
                    if (oMaterial.name == "Body") {
                        // Process selected ColorMaps of each body material
                        replaceMaterialWithLayeredTextures(oMaterial, 0); // 0=Body, 1=Legs, 2=Head
                    }
                    else if (oMaterial.name == "Legs") {
                        replaceMaterialWithLayeredTextures(oMaterial, 1);
                    }
                    else if (oMaterial.name == "Head") {
                        replaceMaterialWithLayeredTextures(oMaterial, 2);
                    }
                }
            } else {
                App.log(g_sScriptName + ": INFO: The selected node is not a figure or prop with materials, aborting script.");
                return;
            }
        } else {
            App.log(g_sScriptName + ": INFO: No node is currently selected, aborting script.");
            return;
        }
    }

    setBusyCursor();
    main();
    clearBusyCursor();

// Finalize the function and invoke
})( getArguments() );